// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/env0/terraform-provider-env0/client (interfaces: ProjectApiClient)

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProjectApiClient is a mock of ProjectApiClient interface.
type MockProjectApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockProjectApiClientMockRecorder
}

// MockProjectApiClientMockRecorder is the mock recorder for MockProjectApiClient.
type MockProjectApiClientMockRecorder struct {
	mock *MockProjectApiClient
}

// NewMockProjectApiClient creates a new mock instance.
func NewMockProjectApiClient(ctrl *gomock.Controller) *MockProjectApiClient {
	mock := &MockProjectApiClient{ctrl: ctrl}
	mock.recorder = &MockProjectApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectApiClient) EXPECT() *MockProjectApiClientMockRecorder {
	return m.recorder
}

// Project mocks base method.
func (m *MockProjectApiClient) Project(arg0 string) (Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Project", arg0)
	ret0, _ := ret[0].(Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Project indicates an expected call of Project.
func (mr *MockProjectApiClientMockRecorder) Project(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Project", reflect.TypeOf((*MockProjectApiClient)(nil).Project), arg0)
}

// ProjectCreate mocks base method.
func (m *MockProjectApiClient) ProjectCreate(arg0 string) (Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectCreate", arg0)
	ret0, _ := ret[0].(Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectCreate indicates an expected call of ProjectCreate.
func (mr *MockProjectApiClientMockRecorder) ProjectCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectCreate", reflect.TypeOf((*MockProjectApiClient)(nil).ProjectCreate), arg0)
}

// ProjectDelete mocks base method.
func (m *MockProjectApiClient) ProjectDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectDelete indicates an expected call of ProjectDelete.
func (mr *MockProjectApiClientMockRecorder) ProjectDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectDelete", reflect.TypeOf((*MockProjectApiClient)(nil).ProjectDelete), arg0)
}

// Projects mocks base method.
func (m *MockProjectApiClient) Projects() ([]Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Projects")
	ret0, _ := ret[0].([]Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Projects indicates an expected call of Projects.
func (mr *MockProjectApiClientMockRecorder) Projects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Projects", reflect.TypeOf((*MockProjectApiClient)(nil).Projects))
}
